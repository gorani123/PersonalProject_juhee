plugins {
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	//querydsl 추가
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	id 'java'
	id 'war'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// 스프링부트에서 사용하는 라이브러리 설치


	//    오라클 라이브러리( 19c )
	implementation 'com.oracle.database.jdbc:ucp:19.14.0.0'
	implementation 'com.oracle.database.security:oraclepki:19.14.0.0'
	implementation 'com.oracle.database.security:osdt_cert:19.14.0.0'
	implementation 'com.oracle.database.security:osdt_core:19.14.0.0'
	//    logback , log4jdbc 설정
	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
	implementation 'ch.qos.logback:logback-classic:1.2.11'
	implementation 'org.slf4j:slf4j-api:1.7.36'
	implementation 'org.slf4j:jcl-over-slf4j:1.7.36'
//    jpa 라이브러리
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	
//    타임리프 라이브러리 - 타임리프 안쓰니까 thymeleaf 들어간 한 줄 지우기
//	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	
	implementation 'org.springframework.boot:spring-boot-starter-web'

//    modelmapper 라이브러리 ----- model to dto 자동변환 dto to model 자동변환
	implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.8'



//	jackson 추가 ----------
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'

//	querydsl 추가
	implementation "com.querydsl:querydsl-jpa:5.0.0"
//	Excel POI 라이브러리 (apache 재단_오픈소스 라이브러리)
//	alt + insert - 종속성 추가 : org.apache.poi:poi-ooxml 검색 . 위에서 두번쨰꺼임. 추가 클릭 -> 오른쪽에 뜨는 빌드 버튼 클릭
	implementation 'org.apache.poi:poi-ooxml:5.2.2'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0"

//    lombok 라이브러리
	compileOnly 'org.projectlombok:lombok'
//    자동 재시작 라이브러리
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
//     oracle jdbc 드라이버 라이브러리
	runtimeOnly 'com.oracle.database.jdbc:ojdbc8'
	annotationProcessor 'org.projectlombok:lombok'
//    WAS 서버 라이브러리(톰캣)
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
//    테스트 모듈 라이브러리 -> J UNIT
	testImplementation 'org.springframework.boot:spring-boot-starter-test'


	/////    OAUTH2 라이브러리 추가 : 소셜로그인(구글로그인, 네이버로그인, 카카오로그인)_기본: 구글/페이스북/깃허브
	//                              SSO(Single Sign On) 간편로그인. 한 번만 로그인하면 됨
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// spring securit 라이브러리 -> 감시모드 시작 (인증 안되면 바로 401,402.. 테스트할땐 이거 빼기. 완성후에만 넣기)
	implementation 'org.springframework.boot:spring-boot-starter-security'

	//    jwt 웹 토큰 설정 라이브러리(json)
	implementation 'io.jsonwebtoken:jjwt:0.9.1'

	//    validation 추가(유효성체크)
	implementation 'org.springframework.boot:spring-boot-starter-validation:2.6.7'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.oracle.database.jdbc:ojdbc8'
	annotationProcessor 'org.projectlombok:lombok'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	//    spring security 테스트 라이브러리
	testImplementation 'org.springframework.security:spring-security-test'

}

tasks.named('test') {
	useJUnitPlatform()
}

//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets {
	main.java.srcDir querydslDir
}

configurations {
	querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}